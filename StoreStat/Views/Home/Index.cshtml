@using StoreStat.Models


@{
    ViewBag.Title = "Index";
}

    
<script src="http://maps.google.com/maps/api/js?sensor=true" type="text/javascript"></script>



<!-- This css is to ensure that the google map contols (zoom bar etc) show and size correctly. -->
<style>
#map_canvas img{max-width:none}
</style>

<!-- This css is to give a nice big popup "info window" when a marker is clicked on the map -->
<style>
    .infoDiv {
    height: 100px;    
    width: 300px; 
    -webkit-user-select: none; 
    background-color: green; 
    color:white
    }
    .hidden-element
{
   display:none;
}
     #Orderdetailcontainer {
            bottom: 0px ;
            display: none ;
            left: 480px ;
            position: fixed ;
            width: 30% ;
            }
     #storedetailcontainer {
            bottom: 0px ;
            display: none ;
            left: 25px ;
            position: fixed ;
            width: 30% ;
            }
     #batchdetailcontainer {
            bottom: 0px ;
            display: none ;
            left: 920px ;
            position: fixed ;
            width: 30% ;
            }
        #storedetailinner,#Orderdetailinner,#batchdetailinner {
            background-color: #F0F0F0 ;
            border: 1px solid #666666 ;
            border-bottom-width: 0px ;
            padding: 20px 20px 400px 20px ;
            }
</style>
<body style="background-color:green">
@section featured {
 <div id="map_canvas" style="height: 500px;"></div>
}
@using (@Html.BeginForm("myMethod", "Home", FormMethod.Post))
{
<!-- Example row of columns -->
@Html.Hidden("storename", "Mexico");
@Html.Hidden("strid",2)
<div>
        
                <span id="intro" style="font-size:20px;color:white">  Choose a store to check status</span>
               
        <div  id="myDiv"  class="hidden-element" >
            <div class="row">
                <a id="LinkStore" href="#">
              <div class="col-md-4">
                <h2 style="font-synthesis:weight;color:white">Store Details</h2>
     
              </div></a>
              <a id="LinkOrder" href ="#"><div class="col-md-4">
                <h2 style="font-synthesis:weight;color:white">Order Details </h2>

              </div></a>
             <a id="LinkBatch" href="#"> <div class="col-md-4">
                <h2 style="font-synthesis:weight;color:white">Batch Details</h2>
   
              </div></a>
            </div>
        </div>
 </div>
 
<div id="storedetailcontainer" style="background-color:green;color:white">
       <div id="storedetailinner" style="background-color:green;color:white">
            <a id="closestoreslide" href="#"> <div style="right:0px;background-color:black;text-align:center;color:white">close</div></a>
         
               <h2>Store Details</h2>
              <div>
                  <span>Stroe Name:</span>
                  @Html.Label("Mexico")
              </div>
              <div>
                  <span>Stroe ID:</span>
                  @Html.Label("Mexico")
              </div>
              <div>
                  <span>Address1:</span>
                  @Html.Label("Mexico")
              </div>
              <div>
                  <span>Address2:</span>
                  @Html.Label("Mexico")
              </div>
           <div>
                  <span>City:</span>
                  @Html.Label("Mexico")
              </div>
              <div>
                  <span>State:</span>
                  @Html.Label("Mexico")
              </div>
           <div>
                  <span>Zip Code:</span>
                  @Html.Label("lblZip","")
              </div>
              

        </div>
    </div>
<div id="Orderdetailcontainer" style="background-color:green ;color:white">
       <div id="Orderdetailinner" style="background-color:green;color:white">
           <a id="closeorderslide" href="#"> <div style="right:0px;background-color:black;text-align:center;color:white">close</div></a>
               <h2>Order Details</h2>
              <div>
                  <span>Stroe Name:</span>
                  @Html.Label("Mexico")
              </div>
              <div>
                  <span>Stroe Type:</span>
                  @Html.Label("Mexico")
              </div>
              <div>
                  <span>Stroe Location:</span>
                  @Html.Label("Mexico")
              </div>
              <div>
                  <span>Stroe Location:</span>
                  @Html.Label("Mexico")
              </div>

        </div>
    </div>
<div id="batchdetailcontainer"style="background-color:green;color:white">
       <div id="batchdetailinner" style="background-color:green;color:white">
           <a id="closebatchslide" href="#"> <div style="right:0px;background-color:black;text-align:center;color:white">close</div></a>
           
               <h2>Batch Details</h2>
              <div>
                  <span>Stroe Name:</span>
                  @Html.Label("Mexico")
              </div>
              <div>
                  <span>Stroe Type:</span>
                  @Html.Label("Mexico")
              </div>
              <div>
                  <span>Stroe Location:</span>
                  @Html.Label("Mexico")
              </div>
              <div>
                  <span>Stroe Location:</span>
                  @Html.Label("Mexico")
              </div>

        </div>
    </div>
}
    </body>
@section scripts {
    <section class="scripts">
        
<script type="text/javascript">

    <!-- This code tells the browser to execute the "Initialize" method only when the complete document model has been loaded. -->
    $(document).ready(function () {
        Initialize();


      
            // Get a reference to the container.
           
       
    });

    // Where all the fun happens 
    function Initialize() {

        // Google has tweaked their interface somewhat - this tells the api to use that new UI
        google.maps.visualRefresh = true;
        var Liverpool = new google.maps.LatLng(53.408841, -2.981397);

        // These are options that set initial zoom level, where the map is centered globally to start, and the type of map to show
        var mapOptions = {
            zoom: 14,
            center: Liverpool,
            mapTypeId: google.maps.MapTypeId.G_NORMAL_MAP
        };

        // This makes the div with id "map_canvas" a google map
        var map = new google.maps.Map(document.getElementById("map_canvas"), mapOptions);

        // This shows adding a simple pin "marker" - this happens to be the Tate Gallery in Liverpool!
        var myLatlng = new google.maps.LatLng(53.40091, -2.994464);

        var marker = new google.maps.Marker({
            position: myLatlng,
            map: map,
            title: 'Tate Gallery'
        });
        var StoreMapdata;
        // You can make markers different colors...  google it up!
        marker.setIcon('http://maps.google.com/mapfiles/ms/icons/green-dot.png')
        //        $.getJSON("Home/StoreListOnMap",
        //    function (data) {
        //        StoreMapdata = data;
        //    }
        //);
        // a sample list of JSON encoded data of places to visit in Liverpool, UK
        // you can either make up a JSON list server side, or call it from a controller using JSONResult
        var data = [
                  { "Id": 1, "PlaceName": "Store1", "OpeningHours": "9-5, FLS", "GeoLong": "53.410146", "GeoLat": "-2.979919", "Strid": "1" },
                  { "Id": 2, "PlaceName": "Store2 ", "OpeningHours": "9-1,2-5, FLS", "GeoLong": "53.401217", "GeoLat": "-2.993052", "Strid": "1" },
                  { "Id": 3, "PlaceName": "Store3", "OpeningHours": "9-7, FLS", "GeoLong": "53.409839", "GeoLat": "-2.979447", "Strid": "1" },
                  { "Id": 4, "PlaceName": "Store4", "OpeningHours": "10-6, FLS", "GeoLong": "53.407511", "GeoLat": "-2.984683", "Strid": "1" }
        ];

        // Using the JQuery "each" selector to iterate through the JSON list and drop marker pins
        $.each(data, function (i, item) {
            var marker = new google.maps.Marker({
                'position': new google.maps.LatLng(item.GeoLong, item.GeoLat),
                'map': map,
                'title': item.PlaceName
            });

            // Make the marker-pin blue!
            marker.setIcon('http://maps.google.com/mapfiles/ms/icons/blue-dot.png')

            // put in some information about each json object - in this case, the opening hours.
            var infowindow = new google.maps.InfoWindow({
                content: "<div class='infoDiv'><h2>" + item.PlaceName + "</h2>" + "<div><h4>Opening hours: " + item.OpeningHours + "</h4></div></div>"
            });

            // finally hook up an "OnClick" listener to the map so it pops up out info-window when the marker-pin is clicked!
            google.maps.event.addListener(marker, 'onmouseover', function () {
                infowindow.open(map, marker);

            });
            google.maps.event.addListener(marker, 'click', function () {
                infowindow.open(map, marker);
                $("#strid").val(item.Strid);
                showDivContent()
            });

        });

           // Get a reference to the container.
            var ordercontainer = $("#Orderdetailcontainer");
            
            // Bind the link to toggle the slide.
            $("#LinkOrder").bind('click',
                function (event) {
                    // Prevent the default event.
                    event.preventDefault();
                    // Toggle the slide based on its current
                    // visibility.
                    if (ordercontainer.is(":visible")) {
                        $.ajax({
                            url: '/Home/OrderDetails',
                            type: 'POST',
                            data: JSON.stringify(requestData),
                            dataType: 'json',
                            contentType: 'application/json; charset=utf-8',
                            error: function (xhr) {
                                alert('Error: ' + xhr.statusText);
                            },
                            success: function (result) {
                                CheckIfInvoiceFound(result);
                            },
                            async: true,
                            processData: false
                        });
                        // Hide - slide up.
                        ordercontainer.slideUp(1000);

                    } else {
                        // Show - slide down.
                        ordercontainer.slideDown(1000);
                    }
                }
            );
        
        var storecontainer = $("#storedetailcontainer");
        // Bind the link to toggle the slide.
        $("#LinkStore").bind('click',
            function (event) {
                // Prevent the default event.
                event.preventDefault();
                // Toggle the slide based on its current
                // visibility.
                var requestData = {
                    StoreID: 2

                };
                if (storecontainer.is(":visible")) {
                    $.ajax({
                        url: '/Home/StoreDetails',
                        type: 'GET',
                        data: JSON.stringify(requestData),
                        dataType: 'json',
                        contentType: 'application/json; charset=utf-8',
                        error: function (xhr) {
                            alert('Error: ' + xhr.statusText);
                        },
                        success: function (result) {

                            alert(result);
                            $("#lblZip").val(result.ZipCode);
                        },
                        async: true,
                        processData: false
                    });
                    // Hide - slide up.
                    storecontainer.slideUp(1000);
                } else {
                    // Show - slide down.
                    storecontainer.slideDown(1000);
                }
            }
        );
            // Get a reference to the container.
            var batchcontainer = $("#batchdetailcontainer");
            // Bind the link to toggle the slide.
            $("#LinkBatch").bind('click',
                function (event) {
                    // Prevent the default event.
                    event.preventDefault();
                    // Toggle the slide based on its current
                    // visibility.
                    if (batchcontainer.is(":visible")) {
                        $.ajax({
                            url: '/home/BatchDetails',
                            type: 'POST',
                            data: JSON.stringify(requestData),
                            dataType: 'json',
                            contentType: 'application/json; charset=utf-8',
                            error: function (xhr) {
                                alert('Error: ' + xhr.statusText);
                            },
                            success: function (result) {
                                CheckIfInvoiceFound(result);
                            },
                            async: true,
                            processData: false
                        });
                        // Hide - slide up.
                        batchcontainer.slideUp(1000);

                    } else {
                        // Show - slide down.
                        batchcontainer.slideDown(1000);
                    }
                }
            );
        
        // Bind the link to toggle the slide.
            $("#closestoreslide").bind('click',
                function (event) {
                    // Prevent the default event.
                    event.preventDefault();
                    // Toggle the slide based on its current
                    // visibility.
                    if (storecontainer.is(":visible")) {
                        // Hide - slide up.
                        storecontainer.slideUp(1000);

                    } else {
                        // Show - slide down.
                        storecontainer.slideDown(1000);
                    }
                }
            );
        
            $("#closebatchslide").bind('click',
           function (event) {
               // Prevent the default event.
               event.preventDefault();
               // Toggle the slide based on its current
               // visibility.
               if (batchcontainer.is(":visible")) {
                   // Hide - slide up.
                   batchcontainer.slideUp(1000);
               } else {
                   // Show - slide down.
                   batchcontainer.slideDown(1000);
               }
           }
       );
      
           $("#closeorderslide").bind('click',
               function (event) {
                   // Prevent the default event.
                   event.preventDefault();
                   // Toggle the slide based on its current
                   // visibility.
                   if (ordercontainer.is(":visible")) {
                       // Hide - slide up.
                       ordercontainer.slideUp(1000);
                      


                      
                   } else {
                       // Show - slide down.
                       ordercontainer.slideDown(1000);
                   }
               }
           );
        
    }
   
    function showDivContent() {
        $('#myDiv').removeClass("hidden-element")

        $("#intro").slideUp();

      
    }

</script>
</section>
}